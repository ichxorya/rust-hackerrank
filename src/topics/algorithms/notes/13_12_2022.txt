// grading_students
1. The requirements could be demonstrated like this:
- If the difference between the next multiple of five and the grade is smaller than 3: Round it up to the next multiple of five.
Example: 84 -> 85 (85 - 84 < 3)
- If the grade is less than 38: Don't round it up (still smaller than 40, failing grade).
Example: 29 -> 29 (29 < 38)
         37 -> 37 (37 < 38 and 40 - 37 >= 3)
         38 -> 40 (40 - 38 < 3)

2. I was overthinking (true), and waste much time on this simple problem. I should have planned more carefully.

Anyway, here's the simple solution (pseudo code):
- If the grade is less than 38 or equal to 100, return the grade.
- If the grade is greater than 38, check the last digit of the grade.
- If the last digit is 3 or 8, add 2 to the grade.
- If the last digit is 4 or 9, add 1 to the grade.

```
    if (grade < 38 && grade == 100) {
        return grade;
    }
    else {
        if (grade % 10 == 3 || grade % 10 == 8) {
            return grade + 2;
        }
        else if (grade % 10 == 4 || grade % 10 == 9) {
            return grade + 1;
        }
        else {
            return grade;
        }
    }
```

3. The code can be shortened if using the rounding formula (pseudo code):
```
    if (grade < 38) {
        return grade;
    }
    else {
        if (grade % 5 >= 3) {
            return grade + (5 - (grade % 5));
        }
        else {
            return grade;
        }
    }
```

// mini_max_sum
1. My algorithm's idea:
- Copy the array to a new container (64 bit integer).
- Sort the container.
- Get the sum of the first four elements and the last four elements.

```
    fn mini_max_sum(arr: &[i32]) {
        let mut temp_arr: Vec<i64> = vec!();
        for i in arr {
            temp_arr.push(*i as i64);
        }

        temp_arr.sort();
        let minsum: i64 = temp_arr[0] + temp_arr[1] + temp_arr[2] + temp_arr[3];
        let maxsum: i64 = temp_arr[1] + temp_arr[2] + temp_arr[3] + temp_arr[4];

        println!("{} {}", minsum, maxsum);
    }
```

2. The above algorithm is not efficient.
Here's the efficient solution (based on the HackerRank's Editorial):
Basically:
- Get the sum of all elements, the max and the min of the array.
- MinSum = Sum - Max (the max element is not included in the sum).
- MaxSum = Sum - Min (the min element is not included in the sum).

```
    fn mini_max_sum(arr: &[i32]) {
        let mut sum: i64 = 0;
        let mut max: i64 = i64::MIN;
        let mut min: i64 = i64::MAX;

        for i in arr {
            let n: i64 = *i as i64;
            sum += n;

            if min > n {
                min = n;
            }

            if max < n {
                max = n;
            }
        }

        println!("{} {}", sum - max, sum - min);
    }
```